<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.chaoxing.base</groupId>
    <artifactId>demo</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    <name>demo</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.15.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <duxiuframe.utils.version>1.0.3-SNAPSHOT</duxiuframe.utils.version>
        <duxiuframe.core.version>1.0.3-SNAPSHOT</duxiuframe.core.version>

        <lombok.version>1.18.2</lombok.version>

        <druid.version>1.1.10</druid.version>

        <mybatis-spring-boot-starter.version>1.3.2</mybatis-spring-boot-starter.version>

        <!--docker-->
        <docker.registry.name>library</docker.registry.name>
        <docker.repostory>192.168.100.184</docker.repostory>

        <!-- Plugin的属性 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <dependency>
            <groupId>com.chaoxing</groupId>
            <artifactId>duxiuframe-core</artifactId>
            <version>${duxiuframe.core.version}</version>
        </dependency>

        <dependency>
            <groupId>com.chaoxing</groupId>
            <artifactId>duxiuframe-utils</artifactId>
            <version>${duxiuframe.utils.version}</version>
        </dependency>

        <!--DB start-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>
        <!--DB end-->

        <!--thymeleaf视图工具-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!-- 排除spring-boot  默认的一些配置-->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter.version}</version>
        </dependency>
        <!-- spring boot end-->


        <!--避免冲突， Thymeleaf 要解析严格XML格式的文档 -->
        <dependency>
            <groupId>net.sourceforge.nekohtml</groupId>
            <artifactId>nekohtml</artifactId>
            <version>${nekohtml.version}</version>
        </dependency>

        <!-- TEST start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- TEST end -->

    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <profileActive>dev</profileActive>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>release</id>
            <properties>
                <profileActive>release</profileActive>
            </properties>
        </profile>
    </profiles>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>application.yml</include>
                    <include>application-${profileActive}.yml</include>
                    <include>*.xml</include>
                    <include>*.txt</include>
                    <include>*.properties</include>
                    <include>static/</include>
                    <include>templates/</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>springloaded</artifactId>
                        <version>1.2.6.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>


            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <noCache>true</noCache>
                    <serverId>registry.docker.sunxu</serverId>
                    <registryUrl>${docker.repostory}</registryUrl>
                    <pushImage>true</pushImage>
                    <!-- optionally overwrite tags every time image is built with docker:build -->
                    <forceTags>true</forceTags>
                    <rm>true</rm>
                    <retryPushCount>1</retryPushCount>
                    <!-- 本地构建时的镜像名称 -->
                    <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                    </imageName>
                    <!-- 推送到私服时的镜像名 -->
                    <imageTags>
                        <imageTag>latest</imageTag>
                        <imageTag>${project.version}</imageTag>
                    </imageTags>

                    <!--<dockerDirectory>src/main/docker</dockerDirectory>-->
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>

                    <resources>
                        <resource><!-- 指定资源文件 -->
                            <targetPath>/</targetPath><!-- 指定要复制的目录路径，这里是当前目录 -->
                            <directory>${project.build.directory}</directory><!-- 指定要复制的根目录，这里是target目录 -->
                            <include>${project.build.finalName}.jar</include><!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
                        </resource>
                    </resources>
                </configuration>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <!--<execution>-->
                    <!--<id>tag-image</id>-->
                    <!--<phase>package</phase>-->
                    <!--<goals>-->
                    <!--<goal>tag</goal>-->
                    <!--</goals>-->
                    <!--<configuration>-->
                    <!--<image>${docker.registry.name}/${project.artifactId}:${project.version}</image>-->
                    <!--<newName>-->
                    <!--${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}-->
                    <!--</newName>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>
                                ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </imageName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
